//! SeaORM Entity. Generated by sea-orm-codegen 0.9.2

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "comment")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub author: i32,
    pub blog_target: i32,
    pub comment_target: Option<i32>,
    pub content: String,
    pub create_time: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::Author",
        to = "super::user::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    User,
    #[sea_orm(
        belongs_to = "super::blog::Entity",
        from = "Column::BlogTarget",
        to = "super::blog::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Blog,
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::CommentTarget",
        to = "Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    SelfRef,
    #[sea_orm(has_many = "super::goods::Entity")]
    Goods,
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl Related<super::blog::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Blog.def()
    }
}

impl Related<super::goods::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Goods.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
